Authors: Silas Rhyneer and Charlie Roslansky

------DIFFIE-HELLMAN------
```
g = 11
p = 59

A = 57
B = 44

def bruteforce(g,p,A):
    a = 1
    while((g**a) % p != A):
        a += 1
    return a

a = bruteforce(g, p, A)
b = bruteforce(g, p, B)
K = (g**(a*b) % 59)
# K = (a**b) % 59
print("a = " + str(a))
print("b = " + str(b))
print("K = " + str(K))
```

By using this brute force algorithm, we guarantee finding the smallest possible value that satisfies our inputs. Upon calculating Alice and Bob's secret keys, we can then computer their shared key.
This code gave Alice's secret number as 36, Bob's as 15, and the shared key of 36.

In practice, Diffie-Hellman key exchange uses numbers hundreds to thousands of bits long. Our brute-force attempt would take around a year of computation to solve on these larger numbers.


--------RSA--------
```
def decode(code, exp, mod):
    str = []
    for x in code:
        str.append(chr((x**exp) % mod))
    return str
    
def findPrimeFactors(product):
    for i in range(2, product):
        if product % i == 0:
            return i, product // i
    return 0, 0

def bruteForceTheBIGD(e, lcm):
    THEBIGD = 1
    while((THEBIGD*e) % lcm != 1):
        THEBIGD += 1
    return THEBIGD


# def bruteforce(integer):
    
e = 13

# de mod(lstm) = 1
p, q = findPrimeFactors(5561) # = 67, 83

lcm = math.lcm(p-1, q-1)

print(lcm)
THEBIGD = bruteForceTheBIGD(e, lcm)
print(THEBIGD)

code = [1516, 3860, 2891, 570, 3483, 4022, 3437, 299,
 570, 843, 3433, 5450, 653, 570, 3860, 482,
 3860, 4851, 570, 2187, 4022, 3075, 653, 3860,
 570, 3433, 1511, 2442, 4851, 570, 2187, 3860,
 570, 3433, 1511, 4022, 3411, 5139, 1511, 3433,
 4180, 570, 4169, 4022, 3411, 3075, 570, 3000,
 2442, 2458, 4759, 570, 2863, 2458, 3455, 1106,
 3860, 299, 570, 1511, 3433, 3433, 3000, 653,
 3269, 4951, 4951, 2187, 2187, 2187, 299, 653,
 1106, 1511, 4851, 3860, 3455, 3860, 3075, 299,
 1106, 4022, 3194, 4951, 3437, 2458, 4022, 5139,
 4951, 2442, 3075, 1106, 1511, 3455, 482, 3860,
 653, 4951, 2875, 3668, 2875, 2875, 4951, 3668,
 4063, 4951, 2442, 3455, 3075, 3433, 2442, 5139,
 653, 5077, 2442, 3075, 3860, 5077, 3411, 653,
 3860, 1165, 5077, 2713, 4022, 3075, 5077, 653,
 3433, 2442, 2458, 3409, 3455, 4851, 5139, 5077,
 2713, 2442, 3075, 5077, 3194, 4022, 3075, 3860,
 5077, 3433, 1511, 2442, 4851, 5077, 3000, 3075,
 3860, 482, 3455, 4022, 3411, 653, 2458, 2891,
 5077, 3075, 3860, 3000, 4022, 3075, 3433, 3860,
 1165, 299, 1511, 3433, 3194, 2458]

out_text = "".join(decode(code, THEBIGD, 5561))
print(out_text)
```
The encrypted message Alice sent was: Hey Bob. It's even worse than we thought! Your pal, Alice. https://www.schneier.com/blog/archives/2022/04/airtags-are-used-for-stalking-far-more-than-previously-reported.html

We brute forced the prime factors of their shared number, and then calculated the lcm, and did the rest of the  calculations Bob would have done in order to calculate his secret key. 
 
Alice used Bob's public key to encode the message, so by finding Bob's private key, we could decode it.

If the numbers were much larger, we would have failed in the finding prime factors of n - it would have taken an unreasonable amount of time.

Alice's message is still insecure because she did not authenticate it, and thus, Bob has no idea who actually sent it.